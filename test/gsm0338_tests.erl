-module(gsm0338_tests).

-include_lib("eunit/include/eunit.hrl").

-define(MAPPING,
        [
         {[16#00, 16#01, 16#02, 16#03], [16#0040, 16#00A3, 16#0024, 16#00A5]},
         {[16#04, 16#05, 16#06, 16#07], [16#00E8, 16#00E9, 16#00F9, 16#00EC]},
         {[16#08, 16#09, 16#0A, 16#0B], [16#00F2, 16#00E7, 16#000A, 16#00D8]},
         {[16#0C, 16#0D, 16#0E, 16#0F], [16#00F8, 16#000D, 16#00C5, 16#00E5]},
         {[16#10, 16#11, 16#12, 16#13], [16#0394, 16#005F, 16#03A6, 16#0393]},
         {[16#14, 16#15, 16#16, 16#17], [16#039B, 16#03A9, 16#03A0, 16#03A8]},
         {[16#18, 16#19, 16#1A, 16#1B], [16#03A3, 16#0398, 16#039E, 16#00A0]},
         {[16#1B,16#0A, 16#1B,16#14, 16#1B,16#28, 16#1B,16#29, 16#1B,16#2F],
          [16#000C,     16#005E,     16#007B,     16#007D,     16#005C]},
         {[16#1B,16#3C, 16#1B,16#3D, 16#1B,16#3E, 16#1B,16#40, 16#1B,16#65],
          [16#005B,     16#007E,     16#005D,     16#007C,     16#20AC]},
         {[16#1C, 16#1D, 16#1E, 16#1F], [16#00C6, 16#00E6, 16#00DF, 16#00C9]},
         {[16#20, 16#21, 16#22, 16#23], [16#0020, 16#0021, 16#0022, 16#0023]},
         {[16#24, 16#25, 16#26, 16#27], [16#00A4, 16#0025, 16#0026, 16#0027]},
         {[16#28, 16#29, 16#2A, 16#2B], [16#0028, 16#0029, 16#002A, 16#002B]},
         {[16#2C, 16#2D, 16#2E, 16#2F], [16#002C, 16#002D, 16#002E, 16#002F]},
         {[16#30, 16#31, 16#32, 16#33], [16#0030, 16#0031, 16#0032, 16#0033]},
         {[16#34, 16#35, 16#36, 16#37], [16#0034, 16#0035, 16#0036, 16#0037]},
         {[16#38, 16#39, 16#3A, 16#3B], [16#0038, 16#0039, 16#003A, 16#003B]},
         {[16#3C, 16#3D, 16#3E, 16#3F], [16#003C, 16#003D, 16#003E, 16#003F]},
         {[16#40, 16#41, 16#42, 16#43], [16#00A1, 16#0041, 16#0042, 16#0043]},
         {[16#44, 16#45, 16#46, 16#47], [16#0044, 16#0045, 16#0046, 16#0047]},
         {[16#48, 16#49, 16#4A, 16#4B], [16#0048, 16#0049, 16#004A, 16#004B]},
         {[16#4C, 16#4D, 16#4E, 16#4F], [16#004C, 16#004D, 16#004E, 16#004F]},
         {[16#50, 16#51, 16#52, 16#53], [16#0050, 16#0051, 16#0052, 16#0053]},
         {[16#54, 16#55, 16#56, 16#57], [16#0054, 16#0055, 16#0056, 16#0057]},
         {[16#58, 16#59, 16#5A, 16#5B], [16#0058, 16#0059, 16#005A, 16#00C4]},
         {[16#5C, 16#5D, 16#5E, 16#5F], [16#00D6, 16#00D1, 16#00DC, 16#00A7]},
         {[16#60, 16#61, 16#62, 16#63], [16#00BF, 16#0061, 16#0062, 16#0063]},
         {[16#64, 16#65, 16#66, 16#67], [16#0064, 16#0065, 16#0066, 16#0067]},
         {[16#68, 16#69, 16#6A, 16#6B], [16#0068, 16#0069, 16#006A, 16#006B]},
         {[16#6C, 16#6D, 16#6E, 16#6F], [16#006C, 16#006D, 16#006E, 16#006F]},
         {[16#70, 16#71, 16#72, 16#73], [16#0070, 16#0071, 16#0072, 16#0073]},
         {[16#74, 16#75, 16#76, 16#77], [16#0074, 16#0075, 16#0076, 16#0077]},
         {[16#78, 16#79, 16#7A, 16#7B], [16#0078, 16#0079, 16#007A, 16#00E4]},
         {[16#7C, 16#7D, 16#7E, 16#7F], [16#00F6, 16#00F1, 16#00FC, 16#00E0]}
        ]).

to_utf8_empty_test() ->
    ?assertEqual(<<>>, gsm0338:to_utf8(<<>>)).

from_utf8_empty_test() ->
    ?assertEqual(<<>>, gsm0338:from_utf8(<<>>)).

to_utf8_valid_test() ->
    lists:foreach(fun({GSM0338, UTF8}) ->
                      ?assertEqual(unicode:characters_to_binary(UTF8),
                                   gsm0338:to_utf8(list_to_binary(GSM0338)))
                  end, ?MAPPING).

from_utf8_valid_test() ->
    lists:foreach(fun({GSM0338, UTF8}) ->
                ?assertEqual(list_to_binary(GSM0338),
                             gsm0338:from_utf8(unicode:characters_to_binary(UTF8)))
                  end, ?MAPPING).
